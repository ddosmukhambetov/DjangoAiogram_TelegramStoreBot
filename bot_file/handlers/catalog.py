from aiogram import types
from asgiref.sync import sync_to_async

from ..loader import bot, dp
from ..keyboards.catalog_ikb import get_categories, get_subcategories, category_cb, subcategory_cb
from ..keyboards import sign_inup_kb
from ..models import Product, SubCategory, Category
from aiogram.dispatcher.filters import Text
from .authorization import sign_in
from ..keyboards.default_kb import markup


# –°–¥–µ–ª–∞–Ω —Ö–µ–Ω–¥–ª–µ—Ä –ø–æ–∫–∞–∑–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ -> –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ -> —Ç–æ–≤–∞—Ä–æ–≤
# @dp.message_handler(Text(equals='–ö–∞—Ç–∞–ª–æ–≥ üõí'))
async def show_categories(message: types.Message):
    if sign_in['current_state']:
        if await category_exists():
            await bot.send_message(chat_id=message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ üìÇ",
                                   reply_markup=await get_categories())
        else:
            await bot.send_message(chat_id=message.chat.id, text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–∫–∞ —á—Ç–æ "
                                                                 "–Ω–µ –¥–æ–±–∞–≤–∏–ª –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚òπÔ∏è",
                                   reply_markup=markup)
    else:
        await message.answer("–í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å ‚ÄºÔ∏è",
                             reply_markup=sign_inup_kb.markup)


async def get_products(query):
    elem = query.data.split(':')
    if await subcategory_products_exists(product_subcategory_id=elem[1]):
        await bot.send_message(chat_id=query.message.chat.id, text="–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ —ç—Ç–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ üëá ")
        async for product in Product.objects.filter(product_subcategory_id=elem[1]):
            photo_id = product.photo.open('rb').read()
            text = f"–¢–æ–≤–∞—Ä üöÄ: {product.name}\n\n" \
                   f"–û–ø–∏—Å–∞–Ω–∏–µ üí¨: {product.description}\n\n" \
                   f"–¶–µ–Ω–∞ üí∞: {product.price} —Ä—É–±–ª–µ–π"
            await bot.send_photo(chat_id=query.message.chat.id, photo=photo_id, caption=text)
    else:
        await bot.send_message(query.message.chat.id, text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤ —ç—Ç–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ üôÅ",
                               reply_markup=markup)


# @dp.callback_query_handler(category_cb.filter(action='view_categories'))
async def show_subcategories(query: types.CallbackQuery):
    if sign_in['current_state']:
        elem = query.data.split(':')
        if await category_subcategory_exists(subcategory_category_id=elem[1]):
            await query.answer(text="–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
            await bot.send_message(chat_id=query.message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ ‚ò∫Ô∏è",
                                   reply_markup=await get_subcategories(elem[1]))
        else:
            await bot.send_message(chat_id=query.message.chat.id,
                                   text="–ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ üòî", reply_markup=markup)
    else:
        await bot.send_message(chat_id=query.message.chat.id,
                               text="–í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å ‚ÄºÔ∏è",
                               reply_markup=sign_inup_kb.markup)


# @dp.callback_query_handler(subcategory_cb.filter(action='view_subcategories'))
async def show_products(query: types.CallbackQuery):
    if sign_in['current_state']:
        await query.answer("–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤")
        await get_products(query)
    else:
        await bot.send_message(chat_id=query.message.chat.id,
                               text="–í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å ‚ÄºÔ∏è",
                               reply_markup=sign_inup_kb.markup)


@sync_to_async
def subcategory_products_exists(product_subcategory_id):
    return Product.objects.filter(product_subcategory=product_subcategory_id).exists()


@sync_to_async
def category_subcategory_exists(subcategory_category_id):
    return SubCategory.objects.filter(subcategory_category_id=subcategory_category_id).exists()


@sync_to_async
def category_exists():
    return Category.objects.all().exists()


def catalog_handlers_register():
    dp.register_message_handler(show_categories, Text(equals='–ö–∞—Ç–∞–ª–æ–≥ üõí'))
    dp.register_callback_query_handler(show_subcategories, category_cb.filter(action='view_categories'))
    dp.register_callback_query_handler(show_products, subcategory_cb.filter(action='view_subcategories'))
