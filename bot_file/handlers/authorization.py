import re

from aiogram.dispatcher.filters import Text
from asgiref.sync import sync_to_async
from django.contrib.auth.hashers import make_password, check_password

from ..loader import dp
from aiogram import types
from aiogram.dispatcher import FSMContext

from ..models import TelegramUser
from ..states import AuthState, SignInState

from ..keyboards import sign_inup_kb
from ..keyboards.registration_kb import markup
from ..keyboards import default_kb

new_user = {}
sign_in = {'current_state': False}

REGISTRATION_TEXT = """
–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –ª–æ–≥–∏–Ω!

–ò–∑ —á–µ–≥–æ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –ª–æ–≥–∏–Ω?
    - –õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ <b>–ª–∞—Ç–∏–Ω—Å–∫–∏—Ö –±—É–∫–≤</b>!
    - –î–ª–∏–Ω–Ω–∞ –ª–æ–≥–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å <b>–±–æ–ª—å—à–µ 3 —Å–∏–º–≤–æ–ª–æ–≤(–±—É–∫–≤ –∏ —Ü–∏—Ñ—Ä)</b>
    - –õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å <b>—É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–º–∏—Å—è</b>
    
–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –æ—Ç—Ä–ø–∞–≤–∏—Ç—å –ª–æ–≥–∏–Ω –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–≥–æ!
"""


# @dp.message_handler(Text(equals='–û—Ç–º–µ–Ω–∞ ‚ùå', ignore_case=True), state='*')
async def command_cancel(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await message.answer(text="–û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞ üôÖ‚Äç", reply_markup=sign_inup_kb.markup)


# @dp.message_handler(Text(equals='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ‚úåÔ∏è'), state='*')
async def process_registration(message: types.Message):
    await message.answer(REGISTRATION_TEXT, reply_markup=markup)
    await AuthState.user_login.set()


# @dp.message_handler(state=AuthState.user_login)
async def process_login(message: types.Message, state: FSMContext):
    login = message.text
    if not await check_users_chat_id(chat_id=message.chat.id):
        if not await check_user(login=login):
            if re.match('^[A-Za-z]+$', login) and len(login) > 3:
                async with state.proxy() as data:
                    data['login'] = login
                    new_user['user_login'] = data['login']
                await message.answer("–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –ø–∞—Ä–æ–ª—å ‚úçÔ∏è")
                await AuthState.user_password.set()
            else:
                await message.answer("–õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ <b>–ª–∞—Ç–∏–Ω—Å–∫–∏—Ö –±—É–∫–≤ üî°</b>\n\n"
                                     "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ ‚Ü©Ô∏è!")
                await AuthState.user_login.set()
        else:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º <b>—É–∂–µ –µ—Å—Ç—å</b>, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ ‚Ü©Ô∏è")
            await AuthState.user_login.set()
    else:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –∫–∞–∫ —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç ü´°\n\n"
                             "–ï—Å–ª–∏ –∂–µ –≤—ã –Ω–µ –ø–æ–º–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª—å –Ω–∞–∂–º–∏—Ç–∏–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É <b>–ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?</b>'",
                             reply_markup=None)


# @dp.message_handler(state=AuthState.user_password)
async def process_password(message: types.Message, state: FSMContext):
    if len(message.text) > 5 and re.match('^[a-zA-Z0-9]+$', message.text) and \
            any(digit.isdigit() for digit in message.text):
        async with state.proxy() as data:
            data['password'] = message.text
        await message.answer("–í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å <b>–µ—â–µ —Ä–∞–∑</b> üîÑ")
        await AuthState.user_password_2.set()
    else:
        await message.answer("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ <b>–ª–∞—Ç–∏–Ω—Å–∫–∏—Ö –±—É–∫–≤</b> "
                             "–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã <b>–æ–¥–Ω—É —Ü–∏—Ñ—Ä—É</b>\n\n"
                             "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É üîÑ")
        await AuthState.user_password.set()


# @dp.message_handler(state=AuthState.user_password_2)
async def process_password_2(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['password_2'] = message.text
        new_user['user_password'] = data['password_2']
        if data['password'] == data['password_2']:

            new_user['chat_id'] = message.chat.id

            await save_user()
            await state.finish()
            await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ <b>—É—Å–ø–µ—à–Ω–æ</b> ‚úÖ\n\n"
                                 "–¢–µ–ø–µ—Ä—å, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å üíù",
                                 reply_markup=sign_inup_kb.markup)
        else:
            await message.answer("–í—ã –≤–≤–µ–ª–∏ –ø–∞—Ä–æ–ª—å <b>–Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ</b> ‚ùå\n\n"
                                 "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ üîÑ")
            await AuthState.user_password.set()


# @dp.message_handler(Text(equals='–í–æ–π—Ç–∏ üëã'))
async def command_sign_in(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ª–æ–≥–∏–Ω ‚ú®", reply_markup=markup)
    await SignInState.login.set()


# @dp.message_handler(state=SignInState.login)
async def process_sign_in(message: types.Message, state: FSMContext):
    if await check_user(message.text):
        async with state.proxy() as sign_in_data:
            sign_in_data['login'] = message.text
            sign_in['login'] = sign_in_data['login']
        await message.answer("–¢–µ–ø–µ—Ä—å —Ç–µ–±–µ –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å üîê")
        await SignInState.password.set()
    else:
        await message.answer("–¢–∞–∫–æ–≥–æ –ª–æ–≥–∏–Ω–∞ <b>–Ω–µ—Ç</b>, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑ ‚ùå")
        await SignInState.login.set()


# @dp.message_handler(state=SignInState.password)
async def process_pass(message: types.Message, state: FSMContext):
    async with state.proxy() as sign_in_data:
        sign_in_data['password'] = message.text
        sign_in['password'] = sign_in_data['password']
        sign_in['current_state'] = True
        if await get_password(username=sign_in['login'], password=sign_in['password']):
            await message.answer("–í—Ö–æ–¥ –±—ã–ª <b>—É—Å–ø–µ—à–Ω–æ</b> –≤—ã–ø–æ–ª–Ω–µ–Ω ‚≠êÔ∏è", reply_markup=default_kb.markup)
            await state.finish()
        else:
            await message.answer("–ü–∞—Ä–æ–ª—å <b>–Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π</b> –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ üîÑ")
            await SignInState.password.set()


@sync_to_async
def save_user():
    user = TelegramUser.objects.create(user_login=new_user['user_login'],
                                       user_password=make_password(new_user['user_password']),
                                       is_registered=True,
                                       chat_id=new_user['chat_id'])
    return user


@sync_to_async
def get_password(username, password):
    user = TelegramUser.objects.get(user_login=username)
    if check_password(password, user.user_password):
        return True
    else:
        return False


@sync_to_async
def check_user(login):
    return TelegramUser.objects.filter(user_login=login).exists()


@sync_to_async
def check_users_chat_id(chat_id):
    return TelegramUser.objects.filter(chat_id=chat_id).exists()


def authorization_handlers_register():
    dp.register_message_handler(command_cancel, Text(equals='–û—Ç–º–µ–Ω–∞ ‚ùå', ignore_case=True), state='*')
    dp.register_message_handler(process_registration, Text(equals='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ‚úåÔ∏è'), state='*')
    dp.register_message_handler(process_login, state=AuthState.user_login)
    dp.register_message_handler(process_password, state=AuthState.user_password)
    dp.register_message_handler(process_password_2, state=AuthState.user_password_2)
    dp.register_message_handler(command_sign_in, Text(equals='–í–æ–π—Ç–∏ üëã'))
    dp.register_message_handler(process_sign_in, state=SignInState.login)
    dp.register_message_handler(process_pass, state=SignInState.password)
